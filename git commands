*git track files not directories
-git init     ,,initialize git project.
-git status ,,to know status of our repo.
*working directory: current directory
  local repo: copy of repo in local machine
  stage area: what files ready to committed.
  remote repo: repo on server
-git add file_name  ,,add files to stage area to be ready to be included in commit.
-git add .  ,,add all from current root to depth.
-git add --all  ,,add all changes in the progect 
-git commit -m”message”  ,, to put files which were in stage are to commit
-git log   ,,it list the commits in the project.
-git log --oneline ,, list the commits summarized.
-git log --oneline  --graph,, list the commits summarized and graphed.
-git config --global  user.name (or) email  
-git show id_of_commit  ,,to show the history of commit
-git diff id1 id2 ,,to show different between 2 commits.
*every commit point to its previous commit.
*every branch has pointer (branch name) & head pointer points to last commit and head can moved by :
-git checkout id 
*(head→master)
	master is pointer point to last commit in master branch
	so now head pointer point to what master pointer point to 
	-to change it:
-git checkout commit_id 
-git checkout master ,,head pointer go again to last commit in the branch
-git branch ,,list branches.
*different commits aren’t different copies of a file, it is changes in lines of the file. (git track changes of lines of file not track different files).
*****remote repo****
-git remote add origin repo_https_link ,,to put the remote repo link in variable(origin) in my project 	“link my project with remote repo”. 
-git remote ,,list my remotes
-git remote -v ,,list my remotes with its links
-git push origin master  ,,to push the repo the the GitHub repo.
-git pull origin master  ,,to pull the remote repo the my local repo
-git remote rm remote_name  ,,to delete it
*****undo changes****local****
-git revert commit_id    ,,it make new commit but without changes was happened in this only commit  				    even it was old one. and this also will be done actually in my own projects “the 			    undo of this commit”.
		“I can do revert to the revert to go to before doing it”

-git reset commit_id (or) git reset --mixed commit_id   ,,the commit will be go back to working 									       directory.
-git reset  --soft commit_id  ,,will go back to stage area.
-git reset --hard commit_id  ,,will be deleted from device

//don’t use reset use revert
********
-git clone project_repo_link  ,,to download the project as git projects
****ssh********
-ssh-keygen -t rsa -b 4096 -C “email” ,,to make ssh key so u don’t need to login every time (push,pull)
****branch***** 
-git branch   ,,to show branches
-git branch new_branch_name   ,,to create new branches
-git checkout branch_name   ,,to switch from brach to another 



